1. GIT = Version Control System
 1-1. git
  - 오픈소스 버전 관리 시스템
  - 로컬에서 버전 관리
  - 소프트웨어 개발 및 소스코드 관리에 사용
  - 버전 관리 프로그램

 1-2. github
  - 클라우드 서버를 사용해서 로컬에서 버전 관리한 소스코드를 업로드하여 공유 가능
  - 원격 저장소

2. GIT 설치
  - ( 설치완료 )

3. SourceTree 설치

  - Git을 GUI로 다룰 수 있도록 해주는 툴이다.
  - https://www.sourcetreeapp.com/ 

4. GIT을 사용하는 방법

  - 터미널에 명령어를 이용하는 CLI 방식
	-> Command Line Interface
  - 소스트리 등의 프로그램을 사용하는 GUI 방식
	-> Graphic User Interface

 5. Git 설정 & 프로젝트 관리 시작하기
  - git 전역으로 사용할 이름과 이메일 주소를 설정
  - github 계정과는 별개
  - git 계정, 이메일
	git config --global user.name "본인 이름"
	git config --global user.email "본인 이메일"

  - git 계정, 이메일 확인
	git config --global user.name
	git config --global user.email

  - 기본 브랜치명 변경
	git config --global init.defaultBranch main

  - git init
	-> git이 관리하라고 명령을 내림
	-> 현재 디렉토리를 git의 저장소로 만듭니다.
	-> .git 폴더가 생성이 된다. .git을 지우면 git으로 관리하는 내용이 날아간다.

  - git stauts
	-> git 프로젝트 폴더의 상태를 확인
	-> Untracked : Git이 해당 파일을 추적 및 관리하지 않은 상태
	-> Tracked : Git이 해당 파일을 추적 및 관리하는 상태

6. git ignore 
  - 포함할 필요가 없을 때
	-> 자동으로 생성 또는 다운로드 되는 파일들
	( 빌드 결과물 (*.class), 라이브러리 )
  - 포함하지 말아야 할 때
	-> 보안상 민감한 정보를 담은 파일
  -.gitignore 파일을 사용해서 배제할 요소들을 지정할 수 있다.

7. git의 변화 넣기
  - 파일 하나 담기
	git add tigers.txt

  - 모든 파일 담기
	git add .

8. commit
  - commit은 의미있는 변경 작업들을 저장소에 기록하는 동작
  - git commit

** 명령어

9. git log
  - git의 모든 history 조회

10. git diff
  - 변경사항을 좀 더 구체적으로 알려준다.

11. add 와 commit 을 한번에
  - 단, 새로 추가된 (untracked) 파일이 없을 때 한정
  - git commit -am "메시지를 추가"


12. commit 할 때 메시지까지
  - git commit -m "메시지입력"

13. git 에서 과거의 시점으로 돌아가는 두 방식
  - reset	: 원하는 시점으로 돌아간 뒤, 이후 내역을 지운다.
  - revert	: 되돌리기 원하는 시점의 커밋을 거꾸로 실행

  - git reset --hard 6e3a31cf1b022a3f5d39325c9a5f22b7155529eb(=돌아갈 커밋 해시)
  - git reset --hard
	-> 뒤에 커밋 해시가 없으면 마지막 커밋을 가리킴



















