1. PUSH 와 PULL
 1-1. 원격으로 커밋 밀어올리기 : push
  git push
	-> 이미 git push -u origin main 으로 대상 원격 브랜치가 지정되어있기 때문에
	git push 명령어만 날려주면 된다.

 1-2. 원격의 커밋 당겨오기 : pull
  git pull

 1-3. pull 할 것이 있을 때 push를 한다면?
  - 원격에 먼저 적용된 새 버전이 있으므로, 적용이 불가능하다
  - pull 해서 원격의 버전을 받아온 다음 push 가능
  - 즉, push를 하려면 원격 저장소의 싱크에 맞춰져 있어야 가능하다

 1-4. push 할 것이 있을 시 pull하는 방법
  - git pull --no-rebase -merge	: merge 방식

  - git pull --rebase			: rebase 방식	// 협업시에는 이 방법이 선호됨.

 1-5. 협업상 충돌 발생

 1-6. 로컬의 내역 강제 Push 해보기
  - 원격의 내용이 local보다 뒤쳐져 있으면 push를 할 수가 없다.
그러나 원격 내용이 잘못되어서 local에 있는 내용으로 강제로 맞춰져야 할 때가 있다. ** 협의가 반드시 필요한 상황

git push --force

2. 원격브랜치 다루기
 2-1. 로컬에서 브랜치 만들어서 원격에 push 해보기

	from-local 브랜치 만들기
	from-local 로 브랜치 이동

 2-2. 원격의 브랜치 로컬에 받아오기
  - github에서 from-remote 브랜치 만들기

 2-3. 원격의 변경사항 확인
  git fetch

 2-4. 로컬에 같은 이름의 브랜치를 생성하여 연결하고 switch
 git switch -t origin/from-remote(브랜치이름)

3. 신규 repository 생성
  - git-another-test

// pull 만 해도 fetch가 자동으로 되지만, 원래는 fetch and pull 단계를 밟는다.

4. Git에 대한 원리 : DB
 4-1. Git DB의 특징
  - .git -> Git DB가 들어있는 디렉토리
  - git DB는 네트워크가 없어도 동작한다.
  - 일반적으로 DB라면 CRUD 기능을 탑재하고 있지만, Git DB는 UD가 빠져있다. CREAT(Insert)와, READING(Select)만 있다.
  - key-value 형태로 관리. key = 해쉬값 value = 코드. 특정 해쉬값에 코드들을 보관하고 있음.
  - 키를 통해 값에 접근하는 방식으로, 이 방식을 사용한다면 키를 만드는 방식이 중요하다.
  - Git은 모든 key마다 코드를 전체 저장하는 방식이 아니라, 수정 전의 파일과의 차이점을 key값에 저장하기 때문에, 용량을 매우 조금 차지한다.
  









































